generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  PUBLISHER
}

enum NewsStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role      @default(PUBLISHER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authoredNews News[] @relation("AuthorNews")
  revisedNews  News[] @relation("RevisorNews")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  newsCategories NewsCategory[]
}

model News {
  id                  String      @id @default(uuid())
  title               String
  text                String
  images              String[]    @default([])
  videos              String[]    @default([])
  externalLinks       String[]    @default([])
  published           Boolean     @default(false)
  publishedAt         DateTime?
  expirationDate      DateTime?
  status              NewsStatus  @default(PENDING)
  tagsKeywords        String[]    @default([])
  viewCount           Int         @default(0)
  revisionDate        DateTime?
  mainPageDisplayDate DateTime?
  newsListPageDate    DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  authorId  String
  author    User    @relation("AuthorNews", fields: [authorId], references: [id])

  revisorId String?
  revisor   User?   @relation("RevisorNews", fields: [revisorId], references: [id])

  newsCategories NewsCategory[]
}

model NewsCategory {
  id         String   @id @default(uuid())
  newsId     String
  categoryId String

  news     News     @relation(fields: [newsId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}