generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum Role {
  ADMIN
  PUBLISHER
}

enum NewsStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum ChangeType {
  CREATE // Renomeado de CREATED para consistência
  UPDATE
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
  EXTERNAL_LINK
}

// Models
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      Role     @default(PUBLISHER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authoredNews    News[]            @relation("AuthorNews")
  revisedNews     News[]            @relation("RevisorNews")
  authoredChanges PendingChange[]   @relation("AuthorOfChange")
  reviewedChanges PendingChange[]   @relation("ReviewerOfChange")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação muitos-para-muitos implícita com News
  news News[]
}

model News {
  id                  String     @id @default(uuid())
  title               String
  text                String
  published           Boolean    @default(false)
  publishedAt         DateTime?
  expirationDate      DateTime?
  status              NewsStatus @default(PENDING)
  tagsKeywords        String[]   @default([])
  viewCount           Int        @default(0)
  revisionDate        DateTime?
  mainPageDisplayDate DateTime?
  newsListPageDate    DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  authorId String
  author   User   @relation("AuthorNews", fields: [authorId], references: [id])

  revisorId String?
  revisor   User?   @relation("RevisorNews", fields: [revisorId], references: [id])

  // Relação muitos-para-muitos implícita com Category
  categories Category[]

  media          Media[]
  pendingChanges PendingChange[]

  search_vector Unsupported("tsvector")?
}

model PendingChange {
  id              String    @id @default(cuid())
  type            ChangeType
  status          Status    @default(PENDING)
  content         Json
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  newsId String?
  news   News?   @relation(fields: [newsId], references: [id], onDelete: Cascade)

  // authorId agora é obrigatório
  authorId String
  author   User   @relation("AuthorOfChange", fields: [authorId], references: [id], onDelete: SetNull)

  // onDelete alterado para SetNull para preservar o histórico
  reviewerId String?
  reviewer   User?   @relation("ReviewerOfChange", fields: [reviewerId], references: [id], onDelete: SetNull)
}

model Media {
  id          String     @id @default(cuid())
  url         String
  path        String
  alt         String?
  title       String?
  description String?
  caption     String?
  copyright   String?
  type        MediaType
  order       Int
  createdAt   DateTime   @default(now())

  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId String

  @@index([newsId])
}