generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String          @id @default(uuid())
  name            String
  email           String          @unique
  role            Role            @default(PUBLISHER)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  authoredNews    News[]          @relation("AuthorNews")
  revisedNews     News[]          @relation("RevisorNews")
  authoredChanges PendingChange[] @relation("AuthorOfChange")
  reviewedChanges PendingChange[] @relation("ReviewerOfChange")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  news      News[]   @relation("CategoryToNews")
}

model News {
  id                  String                   @id @default(uuid())
  title               String
  text                String
  expirationDate      DateTime?
  status              NewsStatus               @default(PENDING)
  tagsKeywords        String[]                 @default([])
  viewCount           Int                      @default(0)
  revisionDate        DateTime?
  mainPageDisplayDate DateTime?
  newsListPageDate    DateTime?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  authorId            String
  revisorId           String?
  published           Boolean                  @default(false)
  publishedAt         DateTime?
  search_vector       Unsupported("tsvector")?
  media               Media[]
  author              User                     @relation("AuthorNews", fields: [authorId], references: [id])
  revisor             User?                    @relation("RevisorNews", fields: [revisorId], references: [id])
  pendingChanges      PendingChange[]
  categories          Category[]               @relation("CategoryToNews")
}

model PendingChange {
  id              String     @id @default(cuid())
  type            ChangeType
  status          Status     @default(PENDING)
  content         Json
  rejectionReason String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  newsId          String?
  authorId        String
  reviewerId      String?
  author          User       @relation("AuthorOfChange", fields: [authorId], references: [id], onDelete: SetNull)
  news            News?      @relation(fields: [newsId], references: [id], onDelete: Cascade)
  reviewer        User?      @relation("ReviewerOfChange", fields: [reviewerId], references: [id])
}

model Media {
  id          String    @id @default(cuid())
  url         String
  path        String
  alt         String?
  title       String?
  description String?
  caption     String?
  copyright   String?
  type        MediaType
  order       Int
  newsId      String
  createdAt   DateTime  @default(now())
  news        News      @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([newsId])
}

enum Role {
  ADMIN
  PUBLISHER
}

enum NewsStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum ChangeType {
  CREATE
  UPDATE
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
  EXTERNAL_LINK
}
